Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.
The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.

APPROACH :

class Solution {
public:
    
    // recursive function
    void solve(TreeNode* root , int targetSum , vector<int> path , int &count){
        
        // base case
        if(root == NULL) return;
        
        // push the first val in path.
        path.push_back(root -> val);
        
        // recursion call.
        solve(root->left,targetSum,path,count);
        solve(root->right,targetSum,path,count);
        
        int size = path.size();
        
        // long long sum as it was giving error for larger val.
        long long sum = 0;
        
        // adding sum and check and count++.
        for(int i = size - 1; i >= 0; i--){
            sum += path[i];
            
            if(sum == targetSum) count++;
        }
        // removing element as come back.
        path.pop_back();
    }
    int pathSum(TreeNode* root, int targetSum) {
        
        vector<int> path;
        int count = 0;
        
        solve(root , targetSum , path , count);
        return count;
    }
};