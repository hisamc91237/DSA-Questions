Given a Binary Tree, find its Boundary Traversal. The traversal should be in the following order: 

Left boundary nodes: defined as the path from the root to the left-most node ie- the leaf node you could reach when you always travel preferring the left subtree over the right subtree. 
Leaf nodes: All the leaf nodes except for the ones that are part of left or right boundary.
Reverse right boundary nodes: defined as the path from the right-most node to the root. The right-most node is the leaf node you could reach when you always travel preferring the right subtree over the left subtree. Exclude the root from this as it was already included in the traversal of left boundary nodes.
Note: If the root doesn't have a left subtree or right subtree, then the root itself is the left or right boundary. 

Input:
        1 
      /   \
     2     3  
    / \   / \ 
   4   5 6   7
      / \
     8   9
   
Output: 1 2 4 8 9 6 7 3

APPROACH : 

Algorithm : 

- Step 1 : Traverse the left part of tree and store all nodes in ans..except leaf node.
- Step 2 : Traverse all leaf nodes of the tree.
- Step 3 : Traverse all right part of tree and store all the nodes while "Coming back" ..except leaf node.

CODE : 

class Solution {
public:

    //function to traverse left part.
    void leftTraverse(Node* root , vector<int> &ans){
        
        // base case .if root null and leaf node..just return.
        if((root == NULL) || (root -> left == NULL && root -> right == NULL)) return;
        
        // store
        ans.push_back(root->data);
        
        // basic recursion.
        if(root->left) leftTraverse(root->left , ans);
        else leftTraverse(root->right , ans);
                          
    }
    
    // function to traverse leafNodes.
    void leafNodeTraverse(Node* root,vector<int> &ans){
        
        // base case
        if(root == NULL) return;
        
        // if leaf node..store the data.
        if(root->left == NULL && root->right == NULL) {
            ans.push_back(root -> data);
            return;
        }
        
        leafNodeTraverse(root->left , ans);
        leafNodeTraverse(root->right, ans);
        
    }
    
    void rightTraverse(Node* root , vector<int> &ans){
        
        // base case
        if((root == NULL) || (root -> left == NULL && root -> right == NULL)) return;
        
        if(root->right) rightTraverse(root->right , ans);
        else rightTraverse(root->left , ans);
        
        // store the ans at end while returnning.
        ans.push_back(root->data);
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        if(root == NULL) return ans;
        ans.push_back(root->data);
        
        // traverse left
        leftTraverse(root->left, ans);
        
        // traverse all leafNodes
        // here comes leftsub tree and right subtree.
        
        // left subtreee
        leafNodeTraverse(root->left , ans);
        
        // right subtreee
        leafNodeTraverse(root->right , ans);
        
        // traverse right
        rightTraverse(root->right,ans);
        
        return ans;