Given inorder and postorder traversals of a Binary Tree in the arrays in[] and post[] respectively. The task is to construct the binary tree from these traversals.

Input:
N = 8
in[] = 4 8 2 5 1 6 3 7
post[] =8 4 5 2 6 7 3 1
Output: 1 2 4 8 5 3 6 7
Explanation: For the given postorder and
inorder traversal of tree the  resultant
binary tree will be
           1
       /      \
     2         3
   /  \      /  \
  4    5    6    7
   \
     8

APPRAOCH :

void createMapping(int in[],map<int,int> &toNodeIndex , int n){
    for(int i = 0 ; i < n;i++){
        toNodeIndex[in[i]] = i;
    }
}

Node* solve(int in[],int post[] , int &index, 
                     int inOrderStart,int inOrderEnd,int n,map<int,int> &toNodeIndex){
    
    // base case
    if(index < 0 || inOrderStart > inOrderEnd) return NULL;
    
    // fetch the first element thst is root.
    int element = post[index--]; // decremenent index as it start from end.
    Node* root = new Node(element);
    
    int position = toNodeIndex[element];
    
    //recursive calls..bt right is first in this question.
    root -> right = solve(in,post,index,position+1,inOrderEnd,n,toNodeIndex);
    root -> left = solve(in,post,index,inOrderStart,position-1,n,toNodeIndex);
    
    return root;
}
//Function to return a tree created from postorder and inoreder traversals.
Node *buildTree(int in[], int post[], int n) {
    
    int postOrderIndex = n -1;
    map<int ,int> toNodeIndex;
    
    // calling mapping function
    createMapping(in , toNodeIndex,n);
    
    Node* ans = solve(in,post,postOrderIndex,0,n-1,n,toNodeIndex);
    
    return ans;
}