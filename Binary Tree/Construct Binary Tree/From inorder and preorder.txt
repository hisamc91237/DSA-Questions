Given 2 Arrays of Inorder and preorder traversal. Construct a tree and print the Postorder traversal. 

Input:
N = 4
inorder[] = {1 6 8 7}
preorder[] = {1 6 7 8}
Output: 8 7 6 1

APPROACH :

class Solution{
    // function to find position of index using map.
    void createMapping(int in[] , map<int,int> &nodeToIndex ,int n){
        for(int i =0 ;i<n;i++){
            nodeToIndex[in[i]] = i;
        }
    }
    
    // recrsive function
    Node* solve(int in[], int pre[], int &index , int inOrderStart , int inOrderEnd,
                            int n,map<int,int> &nodeToIndex){
        
        // base case ..if index exceeds n and start > end
        if(index >= n || inOrderStart > inOrderEnd) return NULL;
        
        // fetch the first element and make it root..
        int element = pre[index++]; // increment index
        Node* root = new Node(element);
        
        // to find position of index in inorder
        int position = nodeToIndex[element];
        
        // recursive calls
        root->left = solve(in,pre,index,inOrderStart,position-1,n,nodeToIndex);
        root->right = solve(in,pre,index,position+1,inOrderEnd,n,nodeToIndex);
        
        return root;
    }
    public:
    Node* buildTree(int in[],int pre[], int n)
    {
        int preOrderIndex = 0;
        map<int ,int> nodeToIndex;
        
        // function to call map
        createMapping(in,nodeToIndex,n);
        
        Node* ans = solve(in , pre , preOrderIndex , 0 , n-1 ,n,nodeToIndex);
        
        return ans;
    }