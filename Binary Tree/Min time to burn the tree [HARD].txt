Given a binary tree and a node called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.

Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 
8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.


APPROACH :

class Solution {
  public:
  // create node to parent mapping which also returns target node.
  Node* createMapping(Node* root,map<Node*,Node*> &nodeToParent , int target){
      
      queue<Node*>q;
      q.push(root);
      
      // this will store the targetNode.
      Node* targetNode = NULL;
      
      // mark root as NULL...as root dont have any parent.
      nodeToParent[root] = NULL;
      
      // normal L.O.T
      while(!q.empty()){
          Node* front = q.front();
          q.pop();
          
          // this is the targetNode
          if(front->data == target) targetNode = front;
          
          // map left and right to its parent which is front.
          if(front->left){
              nodeToParent[front->left] = front;
              q.push(front->left);
          }
          if(front->right){
              nodeToParent[front->right] = front;
              q.push(front->right);
          }
      }
      return targetNode;
      
  }
  
  // create a node , bool mapping which will burn treee
  int burnTree(Node* root,map<Node* ,Node*> &nodeToParent){
      
      // map to store node,bool;
      map<Node* ,bool> visited;
      
      // this is the ans.
      int minTime= 0;
      
      queue<Node*> q;
      q.push(root);
      
      // as root is pushed so visisted.
      visited[root] = true;
     
     // L.O.T
      while(!q.empty()){
          
          // to check any addition in queue.
          bool flag = 0;
          
          int size = q.size();
          for(int i = 0 ; i<size;i++){
              
              Node* front = q.front();
              q.pop();
              
              // mark visited as true..for both right anf left.
              if(front->left && !visited[front->left]){
                  q.push(front->left);
                  visited[front->left] = true;
                  
                  flag = 1;
              }
              
              if(front -> right && !visited[front->right]){
                  q.push(front->right);
                  visited[front->right] = true;
                  
                  flag = 1;
              }
              
              // if front has parent .. mark it as visisted.
              if(nodeToParent[front] && !visited[nodeToParent[front]]){
                  q.push(nodeToParent[front]);
                  visited[nodeToParent[front]] = 1;
                  
                  flag = 1;
              }
          }
          // this means something is pushed in q.
          if(flag == 1) minTime++;
      }
      return minTime;
      
  }
    int minTime(Node* root, int target) 
    {
        map<Node* , Node*> nodeToParent;
        Node* targetNode = createMapping(root,nodeToParent,target);
        
        // here treat targetNode as root for the burnTree func().
        int ans = burnTree(targetNode , nodeToParent);
        return ans;
    }

