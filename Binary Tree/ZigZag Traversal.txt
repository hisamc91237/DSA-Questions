Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

APPROACH : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        // if root is null return.
        if(!root) return {};
        
        // vector to store ans and queue for precessing.
        vector<vector<int>> ans;
        queue<TreeNode*>q;
        
        // push first in q.
        q.push(root);
        
        // level is to decide left to right or right to left.
        int level = 0;
        
        while(!q.empty()){
            int size = q.size();
            vector<int> curr(size);
            
            for(int i=0 ;i<size;i++){
                
                // put front in temp.
                TreeNode* temp = q.front();
                q.pop();
                
                // if level is 0 i.e left to right.
                if(level == 0){
                    curr[i] = temp -> val;
                }
                // else this means right to left so start from last..
                else{
                    curr[size - i - 1] = temp -> val;
                }
                
                //  push left and right element if so..
                if(temp->left) q.push(temp->left);
                if(temp->right) q.push(temp->right);
            }
            ans.push_back(curr);
            
            // now change lvl for zigzag traversal.
            level = !level;
        }
        return ans;
        
    }
};