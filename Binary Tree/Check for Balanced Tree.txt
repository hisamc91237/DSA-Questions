Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

A height balanced tree
        1
     /     \
   10      39
  /
5

An unbalanced tree
        1
     /    
   10   
  /
5

Input:
      1
    /
   2
    \
     3 
Output: 0
Explanation: The max difference in height
of left subtree and right subtree is 2,
which is greater than 1. Hence unbalanced

APPROACH : 

public:
    //Function to check whether a binary tree is balanced or not.
    
    pair <bool , int> isBalancedFast(Node* root){
        // base case
        if(root == NULL){
            pair<bool ,int>p = make_pair(true , 0);
            return p;
        }
        
        // recursion
        pair<int , int> left = isBalancedFast(root -> left);
        pair<int , int> right = isBalancedFast(root -> right);
        
        bool leftAns = left.first;
        bool rightAns = right.first;
        
        bool diff = abs(left.second - right.second) <= 1;
        
        pair<bool , int> ans;
       ans.second = max(left.second , right.second) + 1;
        
        if(leftAns && rightAns && diff){
                ans.first = true;
        }
        else{
            ans.first = false;
        }
        return ans;
    }
    bool isBalanced(Node *root)
    {
       return isBalancedFast(root).first;
    }