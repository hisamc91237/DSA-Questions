Given a binary tree of size N. Your task is to complete the function sumOfLongRootToLeafPath(), that find the sum of all nodes on the longest path from root to leaf node.
If two or more paths compete for the longest path, then the path having maximum sum of nodes is being considered.

Input: 
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3    
      /
     6
Output: 13
Explanation:
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3 
      /
     6

The highlighted nodes (4, 2, 1, 6) above are 
part of the longest root to leaf path having
sum = (4 + 2 + 1 + 6) = 13

APPROACH :

public:
    // Recursive function.
    void solve(Node* root , int length , int &maxLen , int sum , int &maxSum){
        
        // base case
        if(root == NULL){
            
            if(length > maxLen){
            maxLen = length;
            maxSum = sum;
        }
        else if(length == maxLen){
            maxSum = max(sum , maxSum);
        }
        return;
        }
        
        // sum of  nodes
        sum += root->data;
        
        // recursion call
        solve(root->left,length+1,maxLen,sum,maxSum);
        solve(root->right,length+1,maxLen,sum,maxSum);
    }
    
    int sumOfLongRootToLeafPath(Node *root)
    {
        int length = 0 ;
        int maxLen = 0;
        
        int sum = 0 ;
        int maxSum = INT_MIN;
        
        solve(root , length , maxLen , sum , maxSum);
        return maxSum;
    }