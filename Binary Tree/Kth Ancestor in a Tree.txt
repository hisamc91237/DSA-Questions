Given a binary tree of size  N, a node, and a positive integer k., Your task is to complete the function kthAncestor(), the function should return the kth ancestor of the given node in the binary tree. If there does not exist any such ancestor then return -1.
Note: It is guaranteed that the node exists in the tree.

Input:
     K = 2
     Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree

APPROACH :

Node* solve(Node* root ,int &k , int node){
    
    // base case
    if(root == NULL) return NULL;
    
    // this will return root.
    if(root -> data == node) return root;
    
    // recursive call/
    Node* leftAns = solve(root->left,k,node);
    Node* rightAns = solve(root->right,k,node);
    
    // decremenet k and k = INT_MAX to lock as we got ans as k reaches 0.
    if(leftAns != NULL && rightAns == NULL){
        k--;
        if( k <= 0){
            k = INT_MAX;
            return root;
        }
        return leftAns;
    }
    
    if(leftAns == NULL && rightAns != NULL){
        k--;
        if( k <= 0){
            k = INT_MAX;
            return root;
        }
        return rightAns;
    }
    return NULL;
}

int kthAncestor(Node *root, int k, int node)
{
    Node* ans = solve(root,k,node);
    
    // ans->data is special case when k value exceeeds and we dont have any node
    if(ans == NULL || ans->data == node) return -1;
    else return ans->data;
    
}