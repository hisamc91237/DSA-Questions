Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        // base case.
        if (root == NULL) return NULL;
        
        // if root is p or q ..return node.
        if( root  == p || root == q) return root;
        
        // Recursive call
        TreeNode* leftAns = lowestCommonAncestor(root -> left, p,  q);
        TreeNode* rightAns = lowestCommonAncestor(root -> right, p,  q);
        
        // if both are non null this is the node.
        if(leftAns != NULL && rightAns != NULL) 
            return root;
        
        // if right is non null return right.
        else if (leftAns == NULL && rightAns != NULL) 
            return rightAns;
        
        // if left is non null return left.
        else if(leftAns != NULL && rightAns == NULL) 
            return leftAns;
        
        // else is it NULL.
        else return NULL;
    }
};

