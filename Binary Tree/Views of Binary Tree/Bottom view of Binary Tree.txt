Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

nput:
       1
     /   \
    3     2
Output: 3 1 2

APPROACH : 

public:
    vector <int> bottomView(Node *root) {
        
        vector<int> ans;
        if (root == NULL) return ans;
        
        // map to store hd and data of nodes.
        map<int,int> topNode;

        // pair to store node and hd.
        queue<pair<Node* , int> >q;
        
        q.push(make_pair(root , 0));
        
        while(!q.empty()){
            pair<Node* , int> temp = q.front();
            q.pop();
            
            Node* frontNode = temp.first;
            int hd = temp.second;
            
            // this is the only diff between top view and bottom view.
            topNode[hd] = frontNode->data;
            
            if(frontNode -> left)
            q.push(make_pair(frontNode->left, hd-1));
            
            if(frontNode -> right)
            q.push(make_pair(frontNode->right,hd+1));
        }
        for(auto i : topNode) ans.push_back(i.second);
        
        return ans;
