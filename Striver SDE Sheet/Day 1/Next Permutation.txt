A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

Input: nums = [1,2,3]
Output: [1,3,2]

APPROACH 1 : Brute Force

Step 1: Find all possible permutations of elements present and store them.
Step 2: Search input from all possible permutations.
Step 3: Print the next permutation present right after it.

APPROACH 2 : USing inbuilt C++ function.

int main() {
    int arr[] = {1,3,2};
    
    next_permutation(arr,arr+3);//using in-built function of C++
    
    cout<<arr[0]<<" "<<arr[1]<<" "<<arr[2];
    
    return 0;
}

APPROACH 3 : 

Intution : 

- Intuition lies behind the lexicographical ordering of all possible permutations of a given array. There will always be an increasing sequence of all possible permutations when observed.
- step 1 :so we found first breakpoint which is the index where arr[i] < arr[i + 1 ] and store that index.
NOTE : in a edge case where 54321 ..there is no breakpoint so just revrese the entire array.
- step 2 : is again lineraly traverse from back and check where above find index is greater..if found store it somewhere.
- step 3 : swap value of both the index.
- step 4 : revrse frrom k + 1 till end.

CODE : 

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(), k, l;
        
        // traverse from back 
    	for (k = n - 2; k >= 0; k--) {
            
            // step 1.. break as k will hold the index we need.
            if (nums[k] < nums[k + 1]) {
                break;
            }
        }
        // if no breakpoint found.. reverse the entire array.
    	if (k < 0) {
    	    reverse(nums.begin(), nums.end());
            
    	} else {
            
            // again traverse from back
    	    for (l = n - 1; l > k; l--) {
                
                // step 2 : break as l will hold required index now.
                if (nums[l] > nums[k]) {
                    break;
                }
            } 
            // step 3 : swap k and l 
    	    swap(nums[k], nums[l]);
            
            // step 4 : reverse from k + 1 till last.
    	    reverse(nums.begin() + k + 1, nums.end());
        }
    }
};

TC : O(3N) ..one for reverse one and two for 2 traverse.
SC : O(1).