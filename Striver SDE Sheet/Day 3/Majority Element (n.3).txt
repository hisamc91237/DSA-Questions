Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 Input: nums = [1,2]
Output: [1,2]

3 APPROACHES same as n/2

APPROACH 4 : Moore voting algo

Code:

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        // first step
        int num1 = -1;
        int num2 = -1;
        int count1 = 0 , count2 =0;
        int i;
        
        int n = nums.size();
        
        // step 2 : Moore Algo.
        for(int i = 0 ; i<n;i++){
            if(num1 == nums[i])
                count1++;
            else if(num2 == nums[i])
                count2++;
            else if(count1 == 0){
                num1 = nums[i];
                count1 =1;
            }
            else if(count2 == 0){
                num2 = nums[i];
                count2 = 1;
            }
            else{
                count1--;
                count2--; 
            }
        }
        
        count1 = count2 = 0;
        vector<int> ans;
        
        // step 3 : confirm by checking count with n/3
        for(auto i : nums){
            if(i == num1)
                count1++;
            else if(i == num2)
                count2++;
        }
        
        // step 4 : if count is more push in answer.
        if(count1 > n/3)
            ans.push_back(num1);
        
        if(count2 > n/3)
            ans.push_back(num2);
        
        return ans;
        
    }
};