There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

APPROACH 1 :
- By Using Recursion

CODE :

class Solution {
public:
    
    int countPaths(int i , int j , int m ,int n){
        
        // base case
        if(i == (m-1 ) && j == (n-1)) return 1;
        
	// another base case.
        if(i>=m || j>=n) return 0;
        
        else return countPaths(i+1,j,m,n) + countPaths(i,j+1,m,n);
    }
    int uniquePaths(int m, int n) {
        return countPaths(0,0,m,n);
    }
};

APPROACH 2 :

CODE :

class Solution {
public:
    
    int countPaths(int i , int j , int m ,int n,vector<vector<int>> &dp){
        
        // base case
        if(i == (m-1 ) && j == (n-1)) return 1;
        
        if(i>=m || j>=n) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        else return dp[i][j] = countPaths(i+1,j,m,n,dp) + countPaths(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
       
        //dp[1][1]=1;
       int num=countPaths(0,0,m,n,dp);
        if(m==1&&n==1)
            return num;
        return dp[0][0];
    }
};