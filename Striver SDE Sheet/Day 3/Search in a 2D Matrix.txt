Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

APPROACH 1 : TC : O(m * n) , SC : O(1)
-Linear Search 

APPROACH (LeetCode) : The matrix is sorted completely ..TC : O(log(m*n)).

CODE :

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row = matrix.size();
        int col = matrix[0].size();
        
        int start = 0;
        int end = (row* col) - 1; // as last index would be this.
        
        // normal binary search
        while(start <= end){
            int mid = start + (end - start) / 2;
            
            // calculating mid val.
            int mid_val = matrix[mid/col][mid%col];
            
            if(mid_val == target) return true;
            else if(mid_val < target)
                start = mid + 1;
            else
                end = mid -1;
        }
        
        return false;
    }
};

APPROACH (GFG) : Matrix is sorted row wise and coloumn wise.

CODE :

public:	
	int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
	    int i = 0;
	    int j = M - 1; // ending row.
	    
	    while(i< N && j>=0){
	        if(mat[i][j] == X) // target is found
	            return 1;
	        else if (mat[i][j] < X) 
	            i++; // search in next row.
	        else
	            j--; // search in same row.. bt previous coloumn,
	    }
	      return 0; 
	}

