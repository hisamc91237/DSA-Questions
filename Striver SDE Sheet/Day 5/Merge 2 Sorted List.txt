You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

APPROACH 1 : TC : O(n1 + n2) , SC : O(n1 + n2)

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *dummy, *temp;
        dummy = new ListNode();
        temp = dummy;
        
        //when both list1 and list2 isn't empty
        while(list1 && list2){
            if(list1->val < list2->val){
                temp->next = list1;
                list1 = list1->next;
            }
            else{
                temp->next = list2;
                list2 = list2->next;   
            }
            temp = temp->next;
        }
        
        // we reached at the end of one of the list
        if(list1) temp->next = list1;
        if(list2) temp->next = list2;
        
        return dummy->next;
    }
};


APPROACH 2 : TC : O(n1 + n2) , SC : O(1)

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;
        
        // if l1 > l2..make l1 as smaller by swapping
        if(list1->val > list2->val){
            swap(list1,list2);
        }
        
        ListNode* res = list1;
        
        while(list1 && list2){
            ListNode* temp = NULL;
            
            while(list1 && list1->val <= list2->val){
                temp = list1;
                list1 = list1 -> next;
            }
            
            temp -> next = list2;
            
            // if l1 > l2..make l1 as smaller by swapping
            swap(list1,list2);
        }
        
        return res;
    }
};


