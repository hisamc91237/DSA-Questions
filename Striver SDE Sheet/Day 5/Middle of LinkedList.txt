Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

APPROACH 1 : Tc : O(2N) , SC : O(1)

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        
        int cnt = 0;
        ListNode* temp = head;
        
        // count the number of nodes
        while(temp){
            temp = temp -> next;
            cnt++;
        }
        
        temp = head;
        
        // iterate till middle.
        for(int i =0;i < cnt/2 ; i++){
            temp = temp -> next;
        }
        return temp;
    }
};

APPROACH 2 : Slow and Fast pointer...TC : O(N) , SC : O(1)

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(fast && fast -> next){
            slow = slow -> next;
            fast = fast -> next -> next;
            
        }
        
        return slow;
    }
};

