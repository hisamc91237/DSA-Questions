Given the head of a singly linked list, reverse the list, and return the reversed list.

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

APPROACH 1 : Iteratively TC : O(N) , SC : O(1)

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        // create a dummy Node
        ListNode* newHead = NULL;
        
        while(head){
            ListNode* next = head -> next;
            head -> next = newHead;
            newHead = head;
            head = next;
        }
        return newHead;
    }
};


APPRAOCH 2 : Recursion

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        // base case
        if(head == NULL || head -> next == NULL)
            return head;
        
        // Calling Recursion
        ListNode* node = reverseList(head -> next);
        head -> next -> next = head;
        head -> next = NULL;
        return node;
    }
};

