Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

APPROACH : TC : O(2^n x k) , SC : O(k x X)

class Solution {
private:
    void funct(int ind,int target,vector<int>& arr,vector<vector<int>>&ans,vector<int> &ds){

        // base case
        if(target == 0){
            ans.push_back(ds);
            return;
        }

        // iterate for all index
        for(int i = ind ; i < arr.size();i++){

            // skip duplicate element
            if(i > ind && arr[i] == arr[i - 1 ]) continue;
            if(arr[i] > target) break;
            ds.push_back(arr[i]);
            funct(i+1,target-arr[i],arr,ans,ds);
            ds.pop_back();

        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        
        // sort the array
        sort(candidates.begin(),candidates.end());

        vector<vector<int>>ans; // to store the ans
        vector<int> ds; // data structure for recursion
        funct(0,target,candidates,ans,ds);

        return ans;
    }
};