Given an integer array nums that may contain duplicates, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

APPROACH 1 : TC : O( 2^n *(k log (x) )). 2^n

class Solution {
  public:
    void fun(vector < int > & nums, int index, vector < int > ds, set < vector < int >> & res) {
      if (index == nums.size()) {
        sort(ds.begin(), ds.end());
        res.insert(ds);
        return;
      }
      ds.push_back(nums[index]);
      fun(nums, index + 1, ds, res);
      ds.pop_back();
      fun(nums, index + 1, ds, res);
    }
  vector < vector < int >> subsetsWithDup(vector < int > & nums) {
    vector < vector < int >> ans;
    set < vector < int >> res;
    vector < int > ds;
    fun(nums, 0, ds, res);
    for (auto it = res.begin(); it != res.end(); it++) {
      ans.push_back( * it);
    }
    return ans;
  }

APPRAOCH 2 : SC :  O(2^n * k) , TC : O(2^n)

class Solution {
private:
    void helper(int ind,vector<int>& nums,vector<vector<int> >&ans,vector<int> &temp){
        
        // push the data of container in ans
        ans.push_back(temp);

        // iterate 
        for(int i = ind;i <nums.size();i++){

            // condition to skip duplicates
            if(i != ind && nums[i] == nums[i-1]) continue;

            temp.push_back(nums[i]);

            helper(i+1,nums,ans,temp); // calling recursion
            temp.pop_back();
        }
    }
public:   
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        
        // vector to  store the ans
        vector<vector<int> > ans;

        // vector to store structure
        vector<int> temp;

        // sort the array
        sort(nums.begin(),nums.end());
        helper(0,nums,ans,temp);

        return ans;
    }
};