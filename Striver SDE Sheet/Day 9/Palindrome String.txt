Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

APPROACH : 

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> path;

        helper(0,s,res,path);
        return res;

    }

    void helper(int index,string s, vector<vector<string>> &res,vector<string> &path){

        // base case
        if(index == s.size()){
            res.push_back(path);
            return;
        }

        // traverse the loop
        for(int i = index;i<s.size();i++){
            if(isPalindrome(s,index,i)){
                path.push_back(s.substr(index , i - index + 1));
                helper(i+1,s,res,path);
                path.pop_back();
            }
        }
    }

    // function to check palindrome
    bool isPalindrome(string s,int start,int end){
        while(start <= end){
            if(s[start++] != s[end--])
            return false;
        }
        return true;
    }
};