Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer. For more clearity have a look at the printList() function in the driver code.

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)

APPROACH : TC : O(n)

// Function for Merge 2 LL 
Node* merge(Node* a , Node* b){
    
    // creating dummy nodes
    Node* temp = new Node(0);
    Node* res = temp; // to keep track of head.
    
    // Logic for merge 2 sorted LL
    while(a!= NULL && b!=NULL){
        
        if(a -> data < b -> data){
            temp -> bottom = a;
            a = a -> bottom;
            temp = temp -> bottom;
        }
        else{
            temp -> bottom = b;
            b = b -> bottom;
            temp = temp -> bottom;
        }
        
    }
    // for remaining nodes;
    if(a) temp -> bottom = a;
    else temp -> bottom = b;
    
    
    return res -> bottom;
}

/*  Function which returns the  root of 
    the flattened linked list. */
Node *flatten(Node *root)
{
   
   // base case
   if(root == NULL || root -> next == NULL) return root;
   
   // Recursion to the right of root
   root -> next = flatten(root -> next);
   
   // Merge 2 into a single root
   root = merge(root , root -> next);
   
   // return root
   return root;
}