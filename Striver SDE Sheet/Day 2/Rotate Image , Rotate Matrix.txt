You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

APPROACH 1 : Tc..O(N2) ... SC : O(N2)

- By Using another matrix to store the first row as last coloumn.

CODE :

vector < vector < int >> rotate(vector < vector < int >> & matrix) {
  int n = matrix.size();
  vector < vector < int >> rotated(n, vector < int > (n, 0));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      rotated[j][n - i - 1] = matrix[i][j];
    }
  }
  return rotated;
}


APPROACH 2 : TC : O(N2) ...SC : O(1)

Algorithm : 

- Step 1 : Transpose the matrix by swapping a[i][j] with a[j][i].
- Step 2 : Reverse all the rows of mmatrix

CODE :

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        
        // same size as matrix is nxn.
        int n = matrix.size();
        
        // Step 1 : Transopose the matrix 
        for(int i = 0 ; i < n;i++)
            for(int j=0;j < i;j++)
                swap(matrix[i][j] , matrix[j][i]);
            
        // Step 2 : Reverse each row.
        for(int i = 0 ; i < n; i++){
            reverse(matrix[i].begin() , matrix[i].end());
        }
    }
};


