Input : 
5
2 5 1 3 4
Sample Output 2 :
4
Explanation Of Sample Output 1:
We have a total of 4 pairs which satisfy the condition of inversion. (2, 1), (5, 1), (5, 3) and (5, 4).

APPROACH :

#include <bits/stdc++.h>

// Function to merge the arr.
long long merge(long long *arr,long long *temp,long long left,
                long long mid,long long right)
{
    long long inv_count=0;
    long long i = left;
    long long j = mid;
    long long k = left;
    
    // 2 pointers.
    while((i <= mid-1) && (j <= right)){
        if(arr[i] <= arr[j]){
            
            // store in temp arr
            temp[k++] = arr[i++];
        }
        else
        {
            temp[k++] = arr[j++];
            
            // count as it contains inversion.
            inv_count = inv_count + (mid - i);
        }
    }
    
    // handling seperate case.
    while(i <= mid - 1)
        temp[k++] = arr[i++];

    while(j <= right)
        temp[k++] = arr[j++];

    for(i = left ; i <= right ; i++)
        arr[i] = temp[i];
    
    return inv_count;
}

long long mergeSort(long long *arr,long long *temp,
                     long long left,long long right)
{
    long long mid,inv_count = 0;
    if(right > left)
    {
        mid = (left + right)/2;
        
        // calling recursion
        inv_count += mergeSort(arr,temp,left,mid);
        inv_count += mergeSort(arr,temp,mid+1,right);
        
        // merging
        inv_count += merge(arr,temp,left,mid+1,right);
    }
    return inv_count;
}

long long getInversions(long long *arr, int n){
    
    long long temp[n];
    long long ans = mergeSort(arr , temp , 0 , n-1);
    
    return ans;
}