Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Input: nums = [1,3,4,2,2]
Output: 2

APPROACH 1 : TC : O(NLOGN)

- By Using Sorting.

int findDuplicate(vector < int > & arr) {
  int n = arr.size();
  sort(arr.begin(), arr.end());
  for (int i = 0; i < n - 1; i++) {
    if (arr[i] == arr[i + 1]) {
      return arr[i];
    }
  }

APPROACH 2 : TC : O(n) , SC : O(n)

- By using hashing.
- We can even do this by using frequenxy array in a single pass.

int findDuplicate(vector < int > & arr) {
  int n = arr.size();
  int freq[n + 1] = {
    0
  };
  for (int i = 0; i < n; i++) {
    if (freq[arr[i]] == 0) {
      freq[arr[i]] += 1;
    } else {
      return arr[i];
    }
  }
  return 0;
}

APPROACH 3 : TC : O(n)

Algotithm :

- By using slow and fast pointer.
- Increment fast by 2 and slow by 1 till slow != fast.
- Reinitialize fast by 0 and in sedond loop increment both by 1 step.

CODE :

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        int slow = nums[0];
        int fast = nums[0];
        
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        
        // reinitialize fast with 0 .. that is at start point.
        fast = nums[0];
        
        // In this loop ..both will go one step ahead.
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        
        return slow;
    }
};