Given the root of a binary tree, return the inorder traversal of its nodes' values.

Example 1:

Input: root = [1,null,2,3]
Output: [1,3,2]

APPROACH 1 : (Recursion)

class Solution {
public:
    void inorder(TreeNode* root,vector<int>& ans){

        if(root == NULL) return;

       
        inorder(root -> left,ans);
         ans.push_back(root -> val);
        inorder(root -> right,ans);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        
        vector<int> ans;
        inorder(root,ans);
        return ans;

    }
};
APPROACH 2 : Iteratively

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        
        // stack 
        stack<TreeNode*> st;
        vector<int> inorder;
        TreeNode* node = root;

        while(true){

            // Left
            if(node != NULL){
                st.push(node);
                node = node -> left;
            }
            else{
                if(st.empty() == true) break;
                node = st.top(); // as stack top will contain the element to push
                st.pop();

                // Node
                inorder.push_back(node -> val);
                
                // Right
                node = node -> right;
            }
        }
        return inorder;
    }
};