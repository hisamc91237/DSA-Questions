Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order. 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

APPROACH 1 : Pick and Unpick method .. TC : O(N! x N) , SC : O(N) 

class Solution {
  private:
    void recurPermute(vector < int > & ds, vector < int > & nums, vector < vector < int >> & ans, int freq[]) {
      if (ds.size() == nums.size()) {
        ans.push_back(ds);
        return;
      }
      for (int i = 0; i < nums.size(); i++) {
        if (!freq[i]) {
          ds.push_back(nums[i]);
          freq[i] = 1;
          recurPermute(ds, nums, ans, freq);
          freq[i] = 0;
          ds.pop_back();
        }
      }
    }
  public:
    vector < vector < int >> permute(vector < int > & nums) {
      vector < vector < int >> ans;
      vector < int > ds;
      int freq[nums.size()];
      for (int i = 0; i < nums.size(); i++) freq[i] = 0;
      recurPermute(ds, nums, ans, freq);
      return ans;
    }
};

APPROACH 2 : BackTracking ... TC : O(N! x N) , SC : O(1)

class Solution {
private:
    void helper(int ind, vector<vector<int> > &ans,vector<int>& nums){

        // base case
        if(ind ==  nums.size()){
            ans.push_back(nums);
            return;
        }

        // iterate i = ind -> n 
        for(int i =ind;i<nums.size();i++){

            swap(nums[ind],nums[i]);
            helper(ind+1,ans,nums);
            swap(nums[ind],nums[i]); // back track
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int> > ans;
        
        // calling recursive function
        helper(0,ans,nums);

        return ans;
    }
};