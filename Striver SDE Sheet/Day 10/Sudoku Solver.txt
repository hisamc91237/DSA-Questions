Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

APPROACH  : TC : O(9(n ^ 2)), SC : O(1)

class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }

    bool solve(vector<vector<char>>& board){

        // check for empty box
        for(int i =0;i<board.size();i++){
            for(int j = 0;j<board[0].size();j++){

                if(board[i][j] == '.'){

                    // check for all numbers
                    for(char c = '1';c<='9';c++){
                        if(isValid(i,j,board,c)){
                            board[i][j] = c;

                            if(solve(board)) // calling recursion
                            return true;
                            else
                            board[i][j] = '.'; // backtracking
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    bool isValid(int row,int col,vector<vector<char>>& board,char c){
        
        for(int i=0;i<9;i++){

            // check for enrie col
            if(board[i][col] == c) return false;

            // check for entire row
            if(board[row][i] == c) return false;

            // check for entire boc
            if(board[3 *(row/3) + i /3][3 * (col /3)+i % 3] == c) return false;
        }
        return true;
    }
};