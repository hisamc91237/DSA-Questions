Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Approach 1 : TC : O(n3) , SC : O(3k)

vector < vector < int >> threeSum(vector < int > & nums) {
  vector < vector < int >> ans;
  vector < int > temp;
  int i, j, k;
  for (i = 0; i < nums.size() - 2; i++) {
    for (j = i + 1; j < nums.size() - 1; j++) {
      for (k = j + 1; k < nums.size(); k++) {
        temp.clear();
        if (nums[i] + nums[j] + nums[k] == 0) {
          temp.push_back(nums[i]);
          temp.push_back(nums[j]);
          temp.push_back(nums[k]);
        }
        if (temp.size() != 0)
          ans.push_back(temp);
      }
    }
  }

  return ans;
}

APPROACH 2 : TC : O(n2) , SC : O(1)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        //Step 1 : Sort the array
        sort(nums.begin(),nums.end());

        vector<vector<int>> ans; // to store the ans

        // Step 2 : Apply 2 pointer Approach
        for(int i = 0; i < nums.size()-2 ;i++){

            // imp condition
            if(i == 0 || i > 0 && nums[i] != nums[i -1]){

                int lo = i + 1;
                int hi = nums.size() - 1;
                int sum = 0 - nums[i];

                while(lo < hi){

                    // if this is triplet
                    if(nums[lo] + nums[hi] == sum){
                        vector<int> temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[lo]);
                        temp.push_back(nums[hi]);
                        ans.push_back(temp);

                    // Logic to dont process same element
                    while(lo < hi && nums[lo] == nums[lo + 1]) lo++;
                    while(lo < hi && nums[hi] == nums[hi - 1]) hi--;

                    lo++ , hi--;
                    }
                    // if less than sum 
                    else if(nums[lo] + nums[hi] < sum) lo++;
                    else hi--;
                }
        
            }
        }
        return ans;
    }
};