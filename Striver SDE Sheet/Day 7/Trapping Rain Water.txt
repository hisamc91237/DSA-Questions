Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

APPROACH 1 : TC : O(n2) , SC : O(1)

int trap(vector < int > & arr) {
  int n = arr.size();
  int waterTrapped = 0;
  for (int i = 0; i < n; i++) {
    int j = i;
    int leftMax = 0, rightMax = 0;
    while (j >= 0) {
      leftMax = max(leftMax, arr[j]);
      j--;
    }
    j = i;
    while (j < n) {
      rightMax = max(rightMax, arr[j]);
      j++;
    }
    waterTrapped += min(leftMax, rightMax) - arr[i];
  }
  return waterTrapped;
}

APPROACH 2 : Tc : O(n) , SC : O(2n)

int trap(vector < int > & arr) {
  int n = arr.size();
  int prefix[n], suffix[n];
  prefix[0] = arr[0];
  for (int i = 1; i < n; i++) {
    prefix[i] = max(prefix[i - 1], arr[i]);
  }
  suffix[n - 1] = arr[n - 1];
  for (int i = n - 2; i >= 0; i--) {
    suffix[i] = max(suffix[i + 1], arr[i]);
  }
  int waterTrapped = 0;
  for (int i = 0; i < n; i++) {
    waterTrapped += min(prefix[i], suffix[i]) - arr[i];
  }
  return waterTrapped;
}

APPROACH 3 : TC : O(n) , SC : O(n) 

class Solution {
public:
    int trap(vector<int>& height) {
        
        // Step 1 : Initialization for 2 Pointer Approach
        int n = height.size();
        int left = 0;
        int right = n - 1;
        int res = 0 , leftmax = 0 , rightmax = 0;

        while(left <= right){

            // Step 2 : Prcoess for left 
            if(height[left] <= height[right]){
                
                if(height[left] >= leftmax) leftmax = height[left];
                else res += leftmax - height[left];

                left++;
            }

            // Step 3 : Process for right
            else{
                
                if(height[right] >= rightmax) rightmax = height[right];
                else res += rightmax - height[right];

                right--;
            }
        }
        return res;
    }
};
