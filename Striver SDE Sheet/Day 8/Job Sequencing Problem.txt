Given a set of N jobs where each jobi has a deadline and profit associated with it.
Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.
Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.

Example 1:

Input:
N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).

APPROACH : TC : O(N log N) + O(N*M). , Sc : O(M)

class Solution 
{
    public:
    
    // comparaot to sort deadline in descending order
    bool static comparator(Job a, Job b){
        return (a.profit > b.profit);
    }
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        
        // sort the array
        sort(arr , arr + n , comparator);
        
        // find the maximim deadline
        int maxi = arr[0].dead;
        for(int i = 1 ; i < n;i++){
            maxi = max(maxi , arr[i].dead);
        }
        
        int slot[maxi + 1]; // creatinf dummy aray
        
        // initialize all element of dummy array to -1
        for(int i = 0;i<=maxi;i++)
            slot[i] = -1;
            
        int countJobs = 0, jobProfit = 0;

      for (int i = 0; i < n; i++) {
         for (int j = arr[i].dead; j > 0; j--) {
            if (slot[j] == -1) {
               slot[j] = i;
               countJobs++;
               jobProfit += arr[i].profit;
               break;
            }
         }
      }
            vector<int> v;
            v.push_back(countJobs);
            v.push_back(jobProfit);
            
            return v;
           
        
    } 