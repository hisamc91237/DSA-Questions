Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

APPROACH 1 : Time Complexity: O(N log N + NÂ³ logN)

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        
        sort(nums.begin(),nums.end());
      
       set<vector<int>> sv;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
    
                for(int k=j+1;k<n;k++)
                { 
                  
                   int x = (long long)target - 
                           (long long)nums[i]-
                           (long long)nums[j]-(long long)nums[k];
                   
                        if(binary_search(nums.begin()+k+1,nums.end(),x)){
                            vector<int> v;
                            v.push_back(nums[i]);
                            v.push_back(nums[j]);
                            v.push_back(nums[k]);
                            v.push_back(x);
                            sort(v.begin(),v.end());
                            sv.insert(v);
                        }
                }
            }
        }
        vector<vector<int>> res(sv.begin(),sv.end());
        return res;
    }
};

APPROACH 2 : TC : O(n3)

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        // vector to store the ans
        vector<vector<int> > ans;
        
        // check if nums is empty
        if(nums.empty())
            return ans;
        
        int n = nums.size();
        
        // sort the vector
        sort(nums.begin() , nums.end());
        
        for(int i =0;i<n;i++){
            
            for(int j = i + 1;j<n;j++){
                
                // getting the target 2 .. it is a edge case so need to use long long.
                long long int target_2 = 1LL*target - 1LL*nums[j] - 1LL*nums[i];
                
                // initialize back and front
                int front = j + 1;
                int back = n - 1;
                    
                while(front < back){
                    
                    // getting two sum
                    int two_sum = nums[front] + nums[back];
                    
                    // normal check
                    if(two_sum < target_2) front++;
                    else if(two_sum > target_2) back--;
                    
                    else{
                        
                        vector<int> quad(4,0);
                        quad[0] = nums[i];
                        quad[1] = nums[j];
                        quad[2] = nums[front];
                        quad[3] = nums[back];
                        ans.push_back(quad);
                        
                        // processing duplicate of number 3
                        while(front < back && nums[front] == quad[2]) ++front;
                        
                        // processing dupliate of number 4
                        while(front < back && nums[back] == quad[3]) --back;
                        
                    }
                }
                
                // preocessing the duplicate of number 2
                while(j + 1 < n && nums[j + 1] == nums[j]) ++j;
                
            }
            
            // processing the duplicate of number 1
            while(i + 1 < n && nums[i + 1] == nums[i]) ++i;
        }
        
        return ans;
        
    }
};


