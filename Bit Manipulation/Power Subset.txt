Given an integer array nums of unique elements, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

APPROACH :

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        
        // to store ans
        vector<vector<int > >subsets;
        int n = nums.size();
        
        // size of subsets
        int subsetCnt = (1 << n);
        
        // mask till subset count
        for(int mask = 0 ; mask < subsetCnt ; ++mask){
            
            // to store subset.
            vector<int> inner;
            for(int i = 0;i<n;++i){
                
                // bit is 1
                if((mask &(1<<i)) != 0)
                    inner.push_back(nums[i]);
            }
            
            // add into ans vector.
            subsets.push_back(inner);
        }
        return subsets;
    }
};