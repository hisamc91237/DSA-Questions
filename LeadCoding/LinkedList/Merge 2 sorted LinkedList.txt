You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Input: list1 = [], list2 = []
Output: []

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

APPROACH 1 : (Recursion)

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        // calling recursion function
        return merge(list1, list2);
    }
    
    public ListNode merge(ListNode l1, ListNode l2){
        
        //base case
        if(l1 == null) return l2;
        
        if(l2 == null) return l1;
        
        if(l1.val < l2.val){
            
            //recursion
            l1.next = merge(l1.next,l2);
            return l1;
        }
        else{
            
            //recursion
            l2.next = merge(l1,l2.next);
            return l2;
        }
    }
}

/*
Time Complexity:  O(M + N) { M is the Number of Nodes in List1 , N is the Number of Nodes in List2 }
Space Complexity: O(M + N) { Auxillary Stack Space }
*/

APPRAOCH 2 : Optimized

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        if(l1 == null ) return l2;
        
        if(l2 == null) return l1;
        
        ListNode ans = new ListNode(-1);
        ListNode tail = ans;
        
        while(l1!=null && l2!=null){
            if(l1.val < l2.val){
                tail.next = l1;
                tail = l1;
                l1 = l1.next;
            }
            else{
                tail.next = l2;
                tail = l2;
                l2 = l2.next;
            }
        }
        if(l1 == null) tail.next = l2;
        else tail.next = l1;
        return ans.next;
    }
}

/*
Time Complexity:  O(M + N) { M is the Number of Nodes in List1 , N is the Number of Nodes in List2 }
Space Complexity: O(1) 
*/

