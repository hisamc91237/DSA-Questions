Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4

APPROACH : 

class LRUCache {
public:
    
    // map for key value pair.
    unordered_map<int,int>m;
    
    //map for key and address of node
    unordered_map<int , list<int> :: iterator> address;
    
    // creating doubly linkedList
    list <int> l;
    
    // to get capacity of cache
    int cap;
    
    // to get size till now;
    int siz;
    
    
    LRUCache(int capacity) {
         cap = capacity;
        siz= 0;
    }
    
    int get(int key) {
        
        // if key is not present ..return -1;
        if(m.find(key) == m.end()) return -1;
        
        // iterator to store address of key
        list<int> :: iterator it = address[key];
        
        // erase key vaue fron list .as we r getting it and putting it in front.
        l.erase(it);
        address.erase(key);
        
        // push in begining of list
        l.push_front(key);
        address[key] = l.begin();
        
        return m[key];
    }
    
    void put(int key, int value) {
        
        // if key is present...erase it
        if(m.find(key)!=m.end()){
            
            //erasing key rom everwhere.
            l.erase(address[key]);
            
            address.erase(key);
            m.erase(key);
            
            //decerement size of cache.
            siz--;
        }
        
        // if cache is full.
        if(siz == cap){
            
           // store last element in variable  
           int k = l.back();
            
            // delete ladt element as it is LRU
            l.pop_back();
            
            // erase that value from maps
            address.erase(k);
            m.erase(k);
            
            // decrement the size.
            siz--;
        }
        siz++;
        
        // push element at start
        l.push_front(key);
        
        // store iterator in key
        address[key] = l.begin();
        
        // store key value pair in map
        m[key] = value;
        
    }
};

/*
Time Complexity:  O(1) {Average Case Time Complexity}
Space Complexity: O(N).. where n is the capacity number of ekements.
*/

