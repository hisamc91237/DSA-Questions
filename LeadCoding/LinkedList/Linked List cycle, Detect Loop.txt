Given head, the head of a linked list, determine if the linked list has a cycle in it
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

APPROACH 1: using map

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head == NULL) return false;
        
        // creating map to store key val pair
        map<ListNode* , bool> visited;
        
        ListNode *temp = head;
        
        while(temp != NULL){
            
            // this means node is already visited
            if(visited[temp] == true) return true;
            
            // store ...temp and true in map
            visited[temp] = true;
            
            // increment temp
            temp = temp -> next;
        }
        return false;
    }
};

TC: O(N)
SC: O(N)

APPRAOCH 2 : Floyd warshall algorithm (tortoise method)

class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        // if ll has single node
        if(head == NULL) return false;
        
        // slow and fast method / tortoise method
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(fast!= NULL && fast->next!=NULL){
            slow = slow -> next;
            fast = fast -> next -> next;
            
            if(slow == fast){
                return true;
            }
        }
        return false;
    }
};



