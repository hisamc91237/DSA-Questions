You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.
Permute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.
Return any permutation of s that satisfies this property.

Input: order = "cba", s = "abcd"
Output: "cbad"
Explanation: 
"a", "b", "c" appear in order, so the order of "a", "b", "c" should be "c", "b", and "a". 
Since "d" does not appear in order, it can be at any position in the returned string. "dcba", "cdba", "cbda" are also valid outputs.

APPROACH : 

class Solution {
public:
    string customSortString(string order, string str) {
        
        // map to store freq of char.
        map<char , int> mp;
        string ans = "";
        
        // store frequency in map.
        for(auto x : str) mp[x]++;
        
        // processsing loop
        for(auto x : order){
            if(mp.find(x) != mp.end()){
                auto temp = mp.find(x);
                int count = temp -> second;
                
                // shorthand method for ( i to count) ans+=x.
                string s(count , x);// count is the number of count and x is the char.
                ans += s;
                mp.erase(x);
            }
        }
        
        // for any remaining char in map
        for(auto x : mp){
            
            // here second contains count in mp and first char..
            string s(x.second , x.first);
            ans += s;
        }
        return ans;
    }
};