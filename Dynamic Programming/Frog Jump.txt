Recursion :

#include <bits/stdc++.h> 
int solve(int ind,vector<int> &heights){
    // base case
    if(ind == 0) return 0;
    
    int left = solve(ind -1,heights) + abs(heights[ind] - heights[ind - 1]);
    int right = INT_MAX;
    if(ind > 1) right = solve(ind -2,heights) + abs(heights[ind] - heights[ind - 2]);
    
    return min(left,right);
}
int frogJump(int n, vector<int> &heights)
{
    return solve(n - 1,heights);
}

Memoization : 

#include <bits/stdc++.h> 
int solve(int ind,vector<int> &heights,vector<int> &dp){
    // base case
    if(ind == 0) return 0;
    // check for oberlapping sub problem
    if(dp[ind] != -1) return dp[ind];
    
    int left = solve(ind -1,heights,dp) + abs(heights[ind] - heights[ind - 1]);
    int right = INT_MAX;
    if(ind > 1) right = solve(ind -2,heights,dp) + abs(heights[ind] - heights[ind - 2]);
    
    return dp[ind] = min(left,right);
}
int frogJump(int n, vector<int> &heights)
{    
    // delcare dp aray
    vector<int> dp(n + 1,-1);
    return solve(n - 1,heights,dp);
}


Tabulation : 

#include <bits/stdc++.h> 
int frogJump(int n, vector<int> &heights)
{    
    // delcare dp aray
    vector<int> dp(n,0);
    dp[0] = 0;
    
    // Tabulation
    for(int i = 1;i<n;i++){
        int left = dp[i - 1] + abs(heights[i] - heights[i -1]);
        int right = INT_MAX;
        if( i > 1) right = dp[i - 2] + abs(heights[i] - heights[i -2]);
        
        dp[i] = min(left,right);  
    }
   return dp[n -1];
}

Space Optimization : 

#include <bits/stdc++.h> 
int frogJump(int n, vector<int> &heights)
{    
    int prev = 0;
    int prev2 = 0;
    
    // Tabulation
    for(int i = 1;i<n;i++){
        int left = prev + abs(heights[i] - heights[i -1]);
        int right = INT_MAX;
        if( i > 1) right = prev2 + abs(heights[i] - heights[i -2]);
        
        int curr = min(left,right);  
        prev2 = prev;
        prev = curr;
    }
   return prev;
