Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.
 
Note: The Graph doesn't contain any negative weight cycle.

Example 1:

Input:
V = 2
adj [] = {{{1, 9}}, {{0, 9}}}
S = 0
Output:
0 9
Explanation:

The source vertex is 0. Hence, the shortest 
distance of node 0 is 0 and the shortest 
distance from node 1 is 9.

APPROACH : 



class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {   
        //{dist,node};
        set<pair<int,int>> st; 
        
        // distance vector
        vector<int> dist(V,1e9);
        
        st.insert({0,S}); // Inserting 0 dist and Source node
        
        dist[S] = 0; // mark distance of source as 0.
        
        while(!st.empty()){
            auto it = *(st.begin());
            int dis = it.first;
            int node = it.second;
            st.erase(it);
            
            for(auto it : adj[node]){
                int adjacentNode = it[0];
                int edgeW = it[1];
                
                if(dis + edgeW < dist[adjacentNode]){
                    
                    // erase if already present
                    if(dist[adjacentNode] != 1e9)
                        st.erase({dist[adjacentNode],adjacentNode});
                    
                    dist[adjacentNode] = dis + edgeW;
                    st.insert({dist[adjacentNode],adjacentNode});
                }
            }
        }
        return dist;
    }