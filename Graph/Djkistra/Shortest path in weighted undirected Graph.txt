You are given a weighted undirected graph having n+1 vertices numbered from 0 to n and m edges describing there are edges between a to b with some weight, find the shortest path between the vertex 1 and the vertex n and if path does not exist then return a list consisting of only -1.

Example:
Input:
n = 5, m= 6
edges = [[1,2,2], [2,5,5], [2,3,4], [1,4,1],[4,3,3],[3,5,1]]
Output:
1 4 3 5
Explaination:
Shortest path from 1 to n is by the path 1 4 3 5

APPROACH : 

class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        
        // Create graph
        vector<pair<int,int>> adj[n + 1];
        for(auto it : edges){
           adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        
        //Distance and Parent array
        vector<int> dist(n+1,1e9) , parent(n + 1);
        
        // initial make all elemtns of parent to index
        for(int i=1;i<=n;i++) parent[i] = i;
        
        // Declare priority queue
        priority_queue<pair<int,int>,
        vector<pair<int,int>>,greater<pair<int,int>>> pq;
        
        pq.push({0,1});
        dist[1] = 0;
        
        while(!pq.empty()){
            auto it = pq.top();
            int dis = it.first;
            int node = it.second;
            pq.pop();
            
            for(auto it : adj[node]){
                int adjNode = it.first;
                int edgeW = it.second;
                
                if(dis + edgeW < dist[adjNode]){
                    dist[adjNode] = dis + edgeW;
                    pq.push({dis + edgeW , adjNode});
                    parent[adjNode] = node;
                }
            }
        }
        // Path not found
        if(dist[n] == 1e9) return {-1};
        
        vector<int> path;
        
        int node = n; // finding path from back
        while(parent[node] != node){
            path.push_back(node);
            node = parent[node];
        }
        path.push_back(1); // as it doesnt reaches the src.
        
        // reverse the ans
        reverse(path.begin(),path.end());
        
        return path;
    }