Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.

Example 1:

Input:

Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.

APPROACH : 

class Solution
{
	public:
	// dfs function
	void dfs(int node,int vis[],vector<int> adj[],stack<int>&st){
	    
	    // simple dfs
	    vis[node] = 1;
	    for(auto it : adj[node]){
	        if(!vis[it]) dfs(it,vis,adj,st);
	    }
	    st.push(node);
	}
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // vis arr
	    int vis[V] = {0};
	    
	    stack<int> st;
	    
	    for(int i =0;i<V;i++){
	        if(!vis[i]) dfs(i,vis,adj,st);
	    }
	    
	    // to store the ans in vector which is already stored in stack
	    vector<int> ans;
	    for(int i=0;i<V;i++){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}