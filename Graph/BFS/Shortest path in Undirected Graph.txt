You are given an Undirected Graph having unit weight, Find the shortest path from src(0) to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.

Example:

Input:
n = 9, m= 10
edges=[[0,1],[0,3],[3,4],[4 ,5]
,[5, 6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
src=0
Output:
0 1 2 1 2 3 3 4 4

APPROACH : 

class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        
        // Step 1 : Create a Graph
        vector<int> adj[N];
        for(auto it : edges){
            adj[it[1]].push_back(it[0]);
            adj[it[0]].push_back(it[1]);
        }
        
        // Step 2 : Distance Thing
        int dis[N];
        for(int i=0;i<N;i++) dis[i] = 1e9;
        
        dis[src] = 0;
        queue<int> q;
        q.push(src);
        
        //Apply Bfs
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto it : adj[node]){
                if(dis[node] + 1 < dis[it]){
                    dis[it] = dis[node] + 1; // formula
                    q.push(it);
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dis[i] == 1e9) dis[i] = -1;
        }
        vector<int> ans(N);
        for(int i=0;i<N;i++){
            ans[i] = dis[i];
        }
        return ans;
    }
};