Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or 

APPROACH : 

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        
        // Applying TopoSort using BFS
        int indegree[V] = {0};
        
        for(int i=0;i<V;i++){
            for(auto it : adj[i]){
                indegree[it]++;
            }
        }
        
        queue<int>q;
        for(int i=0;i<V;i++){
            if(indegree[i] == 0) q.push(i);
        }
        
        int cnt = 0;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            cnt++;
            
            for(auto i :adj[node]){
                indegree[i]--;
                if(indegree[i] == 0)q.push(i);
            }
        }
        
        // the only change
        if(cnt == V)return false;
        else return true;
    }