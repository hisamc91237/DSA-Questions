Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 

Example 1:

Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.

APPRAOCH 1: By using BFS ... TC : O(n + 2E) , SC : O(n) 

private:
    bool detect(int src, vector<int> adj[],int vis[]){
        
        vis[src] = 1;
        
        // {child,parent} -> queue
        queue<pair<int,int> > q;
        q.push({src,-1});
        
        // Apply BFS
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(auto adjacentNode : adj[node]){
                if(!vis[adjacentNode]) {
                    vis[adjacentNode] =1;
                    q.push({adjacentNode , node});
                }
                else if(parent != adjacentNode)
                return true;
            }
        }
        return false;
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        
        int vis[V] = {0};
        for(int i = 0;i<V;i++){
            if(!vis[i]){
                if(detect(i , adj , vis)) return true;
                
            }
        }
        return false;
    }

APPROACH 2 : By Using DFS ...Tc : O(N + 2E) , SC : O(N)

private:
  
  // Fucntion of DFS
    bool dfs(int node, int parent, int vis[],vector<int> adj[]){
        
        vis[node] = 1;
        
        // check in adjacenNodes
        for(auto adjacentNode : adj[node]){
            if(!vis[adjacentNode]){
                
            //Calling Recursion
              if(dfs(adjacentNode , node, vis,adj) == true) return true;
            }
            else if(adjacentNode != parent) return true;
        }
        return false;
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        
        int vis[V] = {0};
        
        //Checking for all Components
        for(int i = 0 ; i <V;i++){
            if(!vis[i]){
                if(dfs(i, -1, vis,adj) == true) return true;
            }
        }
        return false;
    }