You are given an n x m binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.
A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.
Find the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.

Example 1:

Input:
grid[][] = {{0, 0, 0, 0},
            {1, 0, 1, 0},
            {0, 1, 1, 0},
            {0, 0, 0, 0}}
Output:
3
Explanation:
0 0 0 0
1 0 1 0
0 1 1 0
0 0 0 0
The highlighted cells represents the land cells.

APPROACH : O(n x m) of both

class Solution {
  private:
  
  // dfs function
    void dfs(int row,int col,vector<vector<int>> &vis, vector<vector<int>>& grid,
    int delrow[],int delcol[]){
        
        vis[row][col] = 1;
        
        int n = grid.size();
        int m = grid[0].size();
        
        // check for neighbour
        for(int i = 0 ; i<4;i++){
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            
            // conditions
            if(nrow >= 0 && nrow <n && ncol >= 0 && ncol < m && !vis[nrow][ncol] &&
            grid[nrow][ncol] == 1){
                dfs(nrow,ncol,vis,grid,delrow,delcol);
            }
        }
    }
  public:
    int numberOfEnclaves(vector<vector<int>> &grid) {
        // Code here
        
        int n = grid.size();
        int m = grid[0].size();
        
        // vis vector
        vector< vector<int> > vis(n , vector<int>(m,0));
        
        // to check neighbours
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,-1,0,1};
        
        // traverse in first and last row
        for(int j = 0;j<m;j++){
            
            //for first row
            if(!vis[0][j] && grid[0][j] == 1){
                dfs(0,j,vis,grid,delrow,delcol);
            }
            
            //for last row
            if(!vis[n-1][j] && grid[n-1][j] == 1){
                dfs(n-1,j,vis,grid,delrow,delcol);
            }
        }
        
        // traverse in first and last col
        for(int i =0;i<n;i++){
            
            // for first col
            if(!vis[i][0] && grid[i][0] == 1){
                dfs(i,0,vis,grid,delrow,delcol);
            }
            
            // for last col
            if(!vis[i][m-1] && grid[i][m-1] == 1){
                dfs(i,m-1,vis,grid,delrow,delcol);
            }
        }
        
        //now check for non visited and count
        int count = 0;
        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
                if(!vis[i][j] && grid[i][j] == 1)
                    count++;
            }
        }
        
        return count;