Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). Find the number of islands.

Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Input:
grid = {{0,1},{1,0},{1,1},{1,0}}
Output:
1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.


APPROACH : TC : O(n2) , SC : O(n2)

private : 
  
  // bfs function
  void bfs(int row , int col , vector<vector<int>> & vis , vector<vector<char>> grid){
      
      vis[row][col] = 1;
      queue<pair<int,int> >q;
      q.push({row,col});
      
      int n = grid.size();
      int m = grid[0].size();
      
      while(!q.empty()){
          int row = q.front().first;
          int col = q.front().second;
          q.pop();
          
          // Traverse all neighbour nodes and mark as visited
          for(int delrow = -1 ; delrow <=1;delrow++){
              for(int delcol = -1 ; delcol <= 1; delcol++){
                  int nrow = row + delrow;
                  int ncol = col + delcol;
                  
                  /* conditions :
                  1. validity of matrix
                  2. 1 should be present
                  3. non visited*/
                  if(nrow >=0 && nrow <n && ncol >=0 && ncol < m && grid[nrow][ncol] == '1' 
                  && !vis[nrow][ncol]){
                      vis[nrow][ncol] = 1;
                      q.push({nrow, ncol});
                  }
               }
          }
      }
  }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int> > vis(n , vector<int>(m,0));
        
        int cnt = 0;
        for(int row = 0;row<n;row++){
            for(int col = 0;col <m;col++){
                if(!vis[row][col] && grid[row][col] == '1'){
                    cnt++;
                    bfs(row , col , vis ,grid);
                }
            }
        }
        
        return cnt;
    }