Given an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.

Note: A province is a group of directly or indirectly connected cities and no other cities outside of the group.

Example 1:

Input:
[
 [1, 0, 1],
 [0, 1, 0],
 [1, 0, 1]
]

Output:
2
Explanation:
The graph clearly has 2 Provinces [1,3] and [2]. As city 1 and city 3 has a path between them they belong to a single province. City 2 has no path to city 1 or city 3 hence it belongs to another province.

APPROACh : TC : O(n) , SC : O(n)

class Solution {
  private:
  
  // function for dfs
    void dfs(int node,vector<int> adjList[],int visited[]){
        visited[node] = 1;
        for(auto it : adjList[node]){
            if(!visited[it]){
                dfs(it, adjList, visited);
            }
        }
    }
    
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        
        // vector to store list
        vector<int> adjList[V];
        
        // Convert adj matrix to adj list
        for(int i =0;i<V;i++){
            for(int j = 0;j<V;j++){
                if(adj[i][j] == 1 && i != j){
                    adjList[i].push_back(j);
                    adjList[j].push_back(i);
                }
            }
        }
        
        int visited[V] = {0};
        int cnt = 0; // to count the number of provinces
        
        for(int i =0;i<V;i++){
            if(!visited[i]){
                cnt++;
                dfs(i,adjList,visited);
            }
        }
        return cnt;
    }