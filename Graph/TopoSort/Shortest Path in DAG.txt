Given a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array(or vector) edges[ ][ ] of length M, where there is a directed edge from edge[i][0] to edge[i][1] with a distance of edge[i][2] for all i, 0<=i

Find the shortest path from src(0) vertex to all the vertices and if it is impossible to reach any vertex, then return -1 for that vertex.

Example:

Input:
n = 6, m= 7
edge=[[0,1,2],[0,4,1],[4,5,4]
,[4,2,2],[1,2,3],[2,3,6],[5,3,1]]

Output:
0 2 3 6 1 5

APPRPOACH : 

class Solution {
  private:
    void topoSort(int node,int vis[],vector<pair<int,int>> adj[],stack<int>&st){
        
        vis[node] = 1;
        for(auto it : adj[node]){
            int v = it.first;
            if(!vis[v])
                topoSort(v,vis,adj,st);
        }
        st.push(node);
    }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        
        // Step 1 : Creating graph
        vector<pair<int,int>> adj[N];
        for(int i=0;i<M;i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj[u].push_back({v,wt});
        }
        
        //  Step 2 : find the topoSort
        int vis[N] = {0};
        stack<int> st;
        for(int i=0;i<N;i++){
            if(!vis[i])
                topoSort(i,vis,adj,st);
        }
        
        // Step 3 : Distance thing
        vector<int> dis(N);
        for(int i=0;i<N;i++) dis[i] = 1e9; // make all element as infinity
        
        dis[0] = 0;
        
        while(!st.empty()){
            int node = st.top();
            st.pop();
            
            for(auto i : adj[node]){
                int v = i.first;
                int wt = i.second;
                
                // formula
                if(dis[node] + wt < dis[v]){
                    dis[v] = dis[node] + wt;
                }
            }
        }
        
        for(int i =0;i<N;i++){
            if(dis[i] == 1e9) dis[i] = -1;
        }
        return dis;
        
    }