Given a binary grid of n*m. Find the distance of the nearest 1 in the grid for each cell.
The distance is calculated as |i1  - i2| + |j1 - j2|, where i1, j1 are the row number and column number of the current cell, and i2, j2 are the row number and column number of the nearest cell having value 1.
 
Example 1:

Input: grid = {{0,1,1,0},{1,1,0,0},{0,0,1,1}}
Output: {{1,0,0,1},{0,0,1,1},{1,1,0,0}}
Explanation: The grid is-
0 1 1 0 
1 1 0 0 
0 0 1 1 
0's at (0,0), (0,3), (1,2), (1,3), (2,0) and
(2,1) are at a distance of 1 from 1's at (0,1),
(0,2), (0,2), (2,3), (1,0) and (1,1)
respectively.

APPROACH : TC : O(n x m) , SC : O(n x m).

public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n = grid.size();
	    int m = grid[0].size();
	    
	    // vector matrix for visited and dsitance for ans
	    vector<vector<int>> vis(n,vector<int>(m,0));
	    vector<vector<int>> ans(n,vector<int>(m,0));
	    
	    //({{x cordinate, y cordinate} , no of stepss}) -> queue
	    queue<pair<pair<int,int>,int> > q;
	    
	    // store all 1's in q and mark visited
	    for(int i =0;i<n;i++){
	        for(int j =0;j<m;j++){
	            if(grid[i][j] == 1){
	                q.push({{i,j},0});
	                vis[i][j] = 1;
	            }
	            else{
	                vis[i][j] = 0;
	            }
	        }
	    }
	    
	    // to check for directions
	    int delrow[] = {-1,0,1,0};
	    int delcol[] = {0 ,-1,0,1};
	    
	    // apply bfs
	    while(!q.empty()){
	        int row = q.front().first.first;
	        int col = q.front().first.second;
	        int steps = q.front().second;
	        q.pop();
	        
	        // store ans whenever pop
	        ans[row][col] = steps;
	        
	       for(int i=0;i<4;i++){
	       int nrow = row + delrow[i];
	       int ncol = col + delcol[i]; 
	       
	       // basic conditions
	       if(nrow >=0 && nrow < n && ncol >=0 && ncol < m && vis[nrow][ncol] == 0){
	           q.push({{nrow,ncol},steps + 1});
	           vis[nrow][ncol] = 1;
	       }
	      }     
	    }
	    return ans;
	}