Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2

APPROACH :

#include <bits/stdc++.h> 
#include<set>

// Function to create Adjacency List
void createAdjlists( unordered_map<int , set<int> > &adj, vector<pair<int, int>> &edges){
    
    for(int i =0; i< edges.size();i++){
        int u = edges[i].first;
        int v = edges[i].second;
        
        adj[u].insert(v);
        adj[v].insert(u);
    }
}

// BFS
void bfs(unordered_map<int, set<int> > &adj, unordered_map<int, bool> &visited, int node, vector<int> &ans) {
   queue<int> q;
   q.push(node);
   visited[node] = 1;
   while(!q.empty()) {
       
       // Step 3 : pushing nodes into queue and pop
       int frontNode = q.front();
       q.pop();
       ans.push_back(frontNode);
       
       // Step 4 : Check neighbours of frondNode and check if are visited  or not
       for(auto i:adj[frontNode]) {
           if(!visited[i]) {
               q.push(i);
               visited[i] = 1;
           }
       }
   }
}


vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Step 1 : Create Adjacency List
   unordered_map<int, set<int> > adj;
   vector<int> ans;
   createAdjlists(adj, edges);
   unordered_map<int, bool> visited;
    
   // Step 2 : Traverse and check the node visited or not
   for(int i=0; i<vertex; i++) {
       if(!visited[i]) 
           bfs(adj, visited, i, ans);
   }
   return ans;
}