class info{
    public:
    int maxi;
    int mini;
    bool isBST;
    int size;
};

info helper(TreeNode<int>* root , int &ans){
    
    // base case
    if(root == NULL){
        return{INT_MIN,INT_MAX,true,0};
    }
    
    // recursion
    info left = helper(root -> left , ans);
    info right = helper(root -> right , ans);
    
    info currNode;
    
    currNode.size = left.size + right.size + 1;
    currNode.maxi = max(root -> data , right.maxi);
    currNode.mini = min(root-> data , left.mini);
    
    if(left.isBST && right.isBST && (root -> data > left.maxi && root -> data < right.mini) ){
         currNode.isBST = true;
    }else
        currNode.isBST = false;
    
    // update answer.
    if(currNode.isBST)
        ans = max(ans , currNode.size);
    
    return currNode;
}


int largestBST(TreeNode<int>* root) 
{
    int maxSize = 0;
    info temp = helper(root , maxSize);
    return maxSize;
}
