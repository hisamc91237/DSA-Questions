Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Input: root = [2,1,3]
Output: true

APPROACH :

class Solution {
public:
    bool isBST(TreeNode* root , long min , long max){
        
        // base case
        if(root == NULL) return true;
        
        // root is greater than less and less then max.. return false.
        if(root -> val <= min || root -> val >= max ) return false;
         
        // recursion calling
        return isBST(root -> left , min , root -> val) && isBST(root -> right , root->val,max);
    }
    bool isValidBST(TreeNode* root) {
        
        return isBST(root,LONG_MIN,LONG_MAX);   
    }
};