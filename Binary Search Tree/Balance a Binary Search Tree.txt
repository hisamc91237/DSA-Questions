Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.
A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1 .

Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.


APPROACH :

class Solution {
public:
    
    void inorder(TreeNode* root , vector<int> &ans){
        
        // base case
        if(root == NULL) return;
        
        inorder(root -> left , ans);
        ans.push_back(root -> val);
        inorder(root -> right, ans);
        
    }
    
    TreeNode* inorderToBST(int s , int e , vector<int> &ans){
        
        // base case
        if( s > e) return NULL;
        
        int mid = (s + e ) / 2;
        
        // to make new root of new tree
        TreeNode* root = new TreeNode(ans[mid]);
        
        // recursion for left
       root -> left =  inorderToBST(s , mid - 1 , ans);
        
        // recursion for right
       root -> right =  inorderToBST(mid + 1 , e , ans);
        
        return root;

    }
    TreeNode* balanceBST(TreeNode* root) {
        
        // vector to store inorder 
        vector<int> ans;
        
        //inorder call.
        inorder(root , ans);
        
        return inorderToBST(0, ans.size() -1, ans);
        
        
    }
};

