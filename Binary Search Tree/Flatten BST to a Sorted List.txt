// inorder to store in ans.
void inorder(TreeNode<int>* root , vector<int> &ans){
    
    if(root == NULL) return;
    
    inorder(root->left,ans);
    ans.push_back(root -> data);
    inorder(root->right , ans);
}

TreeNode<int>* flatten(TreeNode<int>* root)
{
   vector<int> ans;
    inorder(root, ans);
    
    // new root for sorted List. 
    TreeNode<int>* newRoot = new TreeNode<int>(ans[0]);
    
    TreeNode<int>* curr = newRoot;
    
    // start from 1 as 0 is inserted.
    for(int i =1 ; i < ans.size();i++){
        
        // curr.left = null and right ko aage badha do..curr ko aage badha do.
        TreeNode<int>* temp = new TreeNode<int>(ans[i]);
        curr -> left = NULL;
        curr -> right = temp;
        curr = temp;
    }
    
    // 3rd step : left and right null.
    
    curr -> left = NULL;
    curr -> right = NULL;
    
    return newRoot;
    
}
