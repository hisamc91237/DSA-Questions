Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Input: root = [3,1,4,null,2], k = 1
Output: 1

APPROACH :;


class Solution {
public:
    
    // travrese in thr format of LNR i.e inorder Traversal.
    int helper(TreeNode* root , int &i, int k){
        
        // base case .. return -1 as return type is int.
        if(root == NULL) return -1;
        
        // L 
        int left = helper(root->left , i ,k);
        if(left != -1) return left;
        
        // N
        i++;
        if( i == k)
            return root -> val;
       
        // R
        return helper(root -> right ,  i , k);
    }
    int kthSmallest(TreeNode* root, int k) {
        int i = 0;
        int ans = helper(root , i , k);
        return ans;
    }
};