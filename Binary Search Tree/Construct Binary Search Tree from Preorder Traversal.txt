Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.
It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.
A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.
A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

APPROACH :

class Solution {
public:
    
    TreeNode* helper(vector<int>& preorder , int mini , int maxi , int &i){
        
        // base case..if i exceeds array size.
        if(i >= preorder.size()) return NULL;
        
        // if it is not in range
        if(preorder[i] < mini || preorder[i] > maxi) return NULL;
        
        TreeNode* root = new TreeNode(preorder[i++]);
        
        // recursiom
        root -> left = helper(preorder , mini , root -> val , i);
        root -> right = helper(preorder ,root -> val , maxi , i);
        
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        // min and max
        int mini = INT_MIN;
        int maxi = INT_MAX;
        int i = 0;
        
        return helper(preorder , mini , maxi , i);
    }
};
