Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

APPROACH 1 : Recursion.

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        // base case
        if(root == NULL) return NULL;
        
        // root lies in left part.
        if(root -> val > p -> val && root -> val > q -> val)
            return lowestCommonAncestor(root -> left , p ,q);
        
        // root lies in right part.
        if(root -> val < p -> val && root -> val < q -> val)
            return lowestCommonAncestor(root -> right , p ,q);
        
        // this is the root (if one is greater and another is smaller cond.).
        return root;
    }
};

APPROACH 2:Iterative

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        while(root != NULL){
        // root lies in left part.
        if(root -> val > p -> val && root -> val > q -> val)
            root = root -> left;
        
        // root lies in right part.
       else if(root -> val < p -> val && root -> val < q -> val)
            root = root -> right;
        
        // this is the root (if one is greater and another is smaller cond.).
        else
            return root;
        }
        return root;
    }
};