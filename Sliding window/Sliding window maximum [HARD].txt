ou are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

ALGORITHM : 

$ iterate the first k sized window , and push the first element in dq .. in 2nd pass if curr is greater then previous..remove previous from back as we want element in DECREASING order.
$ iterate from k till and repeat same..just check if front == i - k.. then pop front as our window is slided..

APPROACH :

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        // deque to store element.
        deque<int> dq;
        
        // to store the ans.
        vector<int> ans;
        
        // check for first k size window.
        for(int i=0;i<k;i++){
            
            // if dq is not empty , last element is smaller then curr element..
            // it cant be the  potential ans..so pop that element.
            while(!dq.empty() && dq.back() < nums[i]) dq.pop_back();
            
            // push curr in dq.
            dq.push_back(nums[i]);
            
        }
        ans.push_back(dq.front());
        
        // iterate for remaining array starting from k.
        for(int i=k;i<nums.size();i++){
            
           // if front is shifted from window del it. 
            if(dq.front() == nums[i-k]) dq.pop_front();
            
            // same as above looop
            while(!dq.empty() && dq.back() < nums[i]) dq.pop_back();
            
            dq.push_back(nums[i]);
            ans.push_back(dq.front());
        }
        return ans;
    }
};

TC : O(N) + O(N) = O(N).